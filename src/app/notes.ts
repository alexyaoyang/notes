export const notes = [
  {
    parsedBody: '',
    body: '### Find the Symmetric Difference\nCreate a function that takes two or more arrays and returns an array of the symmetric difference (△ or ⊕) of the provided arrays.\n\nGiven two sets (for example set A = {1, 2, 3} and set B = {2, 3, 4}), the mathematical term "symmetric difference" of two sets is the set of elements which are in either of the two sets, but not in both (A △ B = C = {1, 4}). For every additional symmetric difference you take (say on a set D = {2, 3}), you should get the set with elements which are in either of the two the sets but not both (C △ D = {1, 4} △ {2, 3} = {1, 2, 3, 4}). The resulting array must contain only unique values (no duplicates).\n\n      function sym() {\n        let argSets = [];\n        let diffs = new Set();\n        for(let i=0;i<arguments.length;i++){\n          argSets.push(new Set(arguments[i]));\n          if(i) symDiff(argSets[i-1], argSets[i]);\n        }\n\n        return [...diffs];\n\n        function symDiff(setA, setB){\n          console.log([[...setA], [...setB]], [...diffs]);\n          setA.forEach((val) => {\n            if(!setB.has(val)){\n              diffs.add(val);\n            } else {\n              diffs.delete(val);\n            }\n          });\n\n          setB.forEach((val) => {\n            if(!setA.has(val)){\n              diffs.add(val);\n            } else {\n              diffs.delete(val);\n            }\n          }); \n        }\n      }'
  },
  {
    parsedBody: '',
    body: '### Appointment Conflict 2\n\n      function hasConflict2(appts,newAppt){\n        let low=0,\n          high=appts.length-1,\n          mid;\n\n        while(low<=high){\n          mid=low+((high-low)/2);\n          console.log([low,mid,high]);\n          if(appts[mid][0] == newAppt[0]) \n            return true;\n          else if(appts[mid][0] < newAppt[0]) \n            low = mid+1;\n          else if(appts[mid][0] > newAppt[0]) \n            high = mid-1;\n        }\n        console.log([low,mid,high]);\n        \n        if(high>0 && appts[high][1] > newAppt[0]) \n          return true;\n        if(low<appts.length && appts[low][0] < newAppt[1]) \n          return true;\n        return false;\n      }\n      let appts = [[1,2],[3,7],[14,16]];\n      '
  },
];